{"version":3,"sources":["main.js"],"names":["graphColor","$tableID","$","updateVerifyPage","convertedIntoArray","treeArr","fillVerifyUserSelect","updateVerficationRootValue","commitment","usersArr","select","document","getElementById","i","options","length","remove","el","createElement","textContent","value","hidden","disabled","selected","appendChild","opt","userId","rootCommitment","text","on","parents","detach","$row","index","prev","before","get","e","row","children","toLowerCase","amount","digest","sha256","next","after","click","append","toAppend","each","rowData","actualData","find","hasClass","Number","push","buildTree","diagramData","treeArrToTreeData","buildDiagram"],"mappings":";AAAA,aAEA,IAAMA,EAAa,CAAC,UAAU,UAAU,UAAU,UAAW,UAAW,UAAU,UAAU,WAEtFC,EAAWC,EAAE,oBAoEnB,SAASC,EAAiBC,EAAoBC,GAC5CC,EAAqBF,GACrBG,EAA2BF,EAAQ,GAAGG,YAIxC,SAASF,EAAqBG,GACxBC,IAAAA,EAASC,SAASC,eAAe,sBAGhCC,IAAAA,EADMH,EAAOI,QAAQC,OAAS,EACvBF,GAAK,EAAGA,IAClBH,EAAOM,OAAOH,GAGZI,IAAAA,EAAKN,SAASO,cAAc,UAChCD,EAAGE,YAAc,gBACjBF,EAAGG,MAAQ,GACXH,EAAGI,QAAS,EACZJ,EAAGK,UAAW,EACdL,EAAGM,UAAW,EACdb,EAAOc,YAAYP,GAEd,IAAA,IAAIJ,EAAI,EAAGA,EAAIJ,EAASM,OAAQF,IAAK,CACpCY,IAAAA,EAAMhB,EAASI,GAAGa,QACtBT,EAAKN,SAASO,cAAc,WACzBC,YAAcM,EACjBR,EAAGG,MAAQK,EACXf,EAAOc,YAAYP,IAIvB,SAASV,EAA2BoB,GAClCzB,EAAE,wBAAwB0B,KAAKD,GAnGjC1B,EAAS4B,GAAG,QAAS,gBAAiB,WAAc3B,EAAE,MAAM4B,QAAQ,MAAMC,WAC1E9B,EAAS4B,GAAG,QAAS,YAAa,WAC1BG,IAAAA,EAAO9B,EAAE,MAAM4B,QAAQ,MACR,IAAjBE,EAAKC,SAA2BD,EAAKE,OAAOC,OAAOH,EAAKI,IAAI,MAGlElC,EAAES,UAAUkB,GAAG,QAAS,yBAA0B,SAAUQ,GAEpDC,IAAAA,EAAMpC,EAAE,MAAM4B,QAAQ,MACxBJ,EAASY,EAAIC,SAAS,YAAYX,OAAOY,cACzCC,EAASH,EAAIC,SAAS,gBAAgBX,OACtCc,EAASC,OAAOjB,EAASe,GAG7BH,EAAIC,SAAS,oBAAoBX,KAAKc,KAGxCzC,EAAS4B,GAAG,QAAS,cAAe,WAC5BG,IAAAA,EAAO9B,EAAE,MAAM4B,QAAQ,MAC7BE,EAAKY,OAAOC,MAAMb,EAAKI,IAAI,MAG7BlC,EAAE,iBAAiB4C,MAAM,WAQvB5C,EAAE,gBAAgB6C,OAFlBC,mUAMF9C,EAAE,iBAAiB4C,MAAM,WAEnB1C,IAAAA,EAAqB,GACzBF,EAAE,8BAA8B+C,KAAK,WAC/BC,IAAAA,EAAU,GACVC,EAAajD,EAAE,MAAMkD,KAAK,MAC1BD,EAAWpC,OAAS,IACtBoC,EAAWF,KAAK,WACV/C,EAAE,MAAMmD,SAAS,WACnBH,EAAQxB,OAASxB,EAAE,MAAM0B,OAChB1B,EAAE,MAAMmD,SAAS,eAC1BH,EAAQT,OAASa,OAAOpD,EAAE,MAAM0B,QACvB1B,EAAE,MAAMmD,SAAS,qBAC1BH,EAAQ1C,WAAaN,EAAE,MAAM0B,UAIjCxB,EAAmBmD,KAAKL,MAKxB7C,IAAAA,EAAUmD,UAAUpD,GAExBD,EAAiBC,EAAoBC,GAEjCoD,IAAAA,EAAcC,kBAAkBrD,GAEpCsD,aAAaF,EAAa,eAAgB,SAAS,GAEnDE,aAAaF,EAAa,uBAAwB,WAAW","file":"main.79c297a1.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst graphColor = ['#0E1766','#710BC2','#F63AAC','#d281d2', '#7aa0cb', '#d281d2','#000000','#F6EBFF'];\n\nconst $tableID = $('#maintable-table');\n$tableID.on('click', '.table-remove', function () { $(this).parents('tr').detach(); });\n$tableID.on('click', '.table-up', function () {\n  const $row = $(this).parents('tr');\n  if ($row.index() === 0) { return; } $row.prev().before($row.get(0));\n});\n\n$(document).on(\"keyup\", '#maintable-table tr td', function (e) {\n  // $('#maintable-table tr td').on(\"keydown\", function(){\n  const row = $(this).parents('tr');\n  var userId = row.children('.user-id').text().toLowerCase();\n  var amount = row.children('.user-amount').text();\n  let digest = sha256(userId + amount);\n\n  // console.log('userId: ' + userId + ' amount: ' + amount + '. sha256(' + userId + amount +') = ' + digest);  \n  row.children('.user-commitment').text(digest);\n});\n\n$tableID.on('click', '.table-down', function () {\n  const $row = $(this).parents('tr');\n  $row.next().after($row.get(0));\n});\n\n$(\"#btn-add-user\").click(function () {\n  var toAppend = '<tr>';\n  toAppend += '<td class=\"pt-3-half user-id\" contenteditable=\"true\">user_id</td>';\n  toAppend += '<td class=\"pt-3-half user-amount\" contenteditable=\"true\">0</td>';\n  toAppend += '<td class=\"pt-3-half user-commitment\">commitment</td>';\n  toAppend += '<td><span class=\"table-remove\"><button type=\"button\" class=\"btn btn-danger btn-rounded btn-sm my-0\">Remove</button></span></td>';\n  toAppend += '</tr>';\n\n  $(\"#users_table\").append(toAppend);\n});\n\n\n$(\"#nav-tree-tab\").click(function () {\n  // table to array object\n  var convertedIntoArray = [];\n  $(\"table#users_table tbody tr\").each(function () {\n    var rowData = {};\n    var actualData = $(this).find('td');\n    if (actualData.length > 0) {\n      actualData.each(function () {\n        if ($(this).hasClass(\"user-id\")) {\n          rowData.userId = $(this).text();\n        } else if ($(this).hasClass(\"user-amount\")) {\n          rowData.amount = Number($(this).text());\n        } else if ($(this).hasClass(\"user-commitment\")) {\n          rowData.commitment = $(this).text();\n        }\n      });\n\n      convertedIntoArray.push(rowData);\n    }\n  });\n\n  \n  let treeArr = buildTree(convertedIntoArray);\n\n  updateVerifyPage(convertedIntoArray, treeArr);\n\n  let diagramData = treeArrToTreeData(treeArr);\n\n  buildDiagram(diagramData, \"merkle-graph\", \"graph\", true);\n\n  buildDiagram(diagramData, \"merkle-graph-verifer\", \"graph-b\", false);\n});\n\nfunction updateVerifyPage(convertedIntoArray, treeArr){\n  fillVerifyUserSelect(convertedIntoArray);\n  updateVerficationRootValue(treeArr[0].commitment);\n\n}\n\nfunction fillVerifyUserSelect(usersArr) {\n  var select = document.getElementById(\"user-verify-select\");\n\n  var i, L = select.options.length - 1;\n  for (i = L; i >= 0; i--) {\n    select.remove(i);\n  }\n\n  var el = document.createElement(\"option\");\n  el.textContent = \"Choose a User\";\n  el.value = \"\";\n  el.hidden = true;\n  el.disabled = true;\n  el.selected = true;\n  select.appendChild(el);\n\n  for (var i = 0; i < usersArr.length; i++) {\n    var opt = usersArr[i].userId;\n    el = document.createElement(\"option\");\n    el.textContent = opt;\n    el.value = opt;\n    select.appendChild(el);\n  }\n}\n\nfunction updateVerficationRootValue(rootCommitment) {\n  $('#published-root-text').text(rootCommitment);\n}\n\n\n// function shortHash(hash) {\n//   let trimmedHash = hash.trim();\n//   let first = trimmedHash.substring(0,3);\n//   let last = trimmedHash.substring(trimmedHash.length - 3);\n//   let res = first + '...' + last;\n\n//   return res;\n// }\n\n\n// $(\"#nav-tree-tab\").click(function () {\n\n//   // table to array object\n//   var convertedIntoArray = [];\n//   $(\"table#users_table tbody tr\").each(function () {\n//     var rowData = {};\n//     var actualData = $(this).find('td');\n//     if (actualData.length > 0) {\n//       actualData.each(function () {\n//         if ($(this).hasClass(\"user-id\")) {\n//           rowData.userId = $(this).text();\n//         } else if ($(this).hasClass(\"user-amount\")) {\n//           rowData.amount = Number($(this).text());\n//         } else if ($(this).hasClass(\"user-commitment\")) {\n//           rowData.commitment = $(this).text();\n//         }\n//       });\n\n//       convertedIntoArray.push(rowData);\n//     }\n//   });\n\n//   let treeArr = buildTree(convertedIntoArray);\n\n//   let diagramData = treeArrToTreeData(treeArr);\n\n//   buildDiagram(diagramData);\n// });\n\n// function treeArrToTreeData(array) {\n//   let level = 0;\n//   let idx = 1;\n//   let res = { name: \"Balance \" + array[idx - 1].amount, fill: graphColor[level], subname: shortHash(array[level].commitment) }\n//   res.children = [];\n//   // left child\n\n//   let left = recursivee(idx + 1, level + 1, array);\n//   if (left) {\n//     res.children.push(left);\n//   }\n\n//   // right child\n\n//   let right = recursivee(idx + 2, level + 1, array);\n//   if (right) {\n//     res.children.push(right);\n//   }\n//   return res;\n// }\n\n// function recursivee(idx, level, array) {\n//   if (idx > array.length) {\n//     return \"\"\n//   }\n\n//   let res = { name: \"Balance \" + array[idx - 1].amount, fill: graphColor[level], subname: shortHash(array[idx - 1].commitment) }\n//   res.children = [];\n\n//   // left child\n//   let left = recursivee(idx * 2, level+1, array);\n//   if (left) {\n//     res.children.push(left);\n//   }\n\n//   // right child\n//   let right = recursivee((idx * 2) + 1, level+1, array);\n//   if (right) {\n//     res.children.push(right);\n//   }\n\n//   return res\n// }\n\n// function buildTree(records) {\n\n//   // build leaf level \n\n//   let leafLevelLength = 1;\n//   for (; leafLevelLength < records.length; leafLevelLength = leafLevelLength * 2) { }\n\n//   let leafLevel = [];\n\n//   for (let i = 0; i < leafLevelLength; i++) {\n\n//     if (i < records.length) {\n//       leafLevel.push({ commitment: records[i].commitment, amount: records[i].amount });\n//     } else {\n//       leafLevel.push({ commitment: sha256(\"\"), amount: 0 });\n//     }\n//   }\n\n//   let levels = [];\n//   levels.push(leafLevel);\n\n//   let currLevel = leafLevel\n//   for (; currLevel.length > 1;) {\n\n//     let nextLevel = [];\n//     for (let i = 1; i < currLevel.length; i = i + 2) {\n//       let nextItem = { commitment: sha256(currLevel[i - 1].commitment + currLevel[i].commitment), amount: currLevel[i - 1].amount + currLevel[i].amount }\n//       nextLevel.push(nextItem);\n//     }\n\n//     levels.push(nextLevel);\n//     currLevel = nextLevel;\n//   }\n\n//   let res = [];\n//   for (let i = levels.length; i >= 0; i--) {\n//     res.push.apply(res, levels[i])\n//   }\n\n//   return res;\n// }\n\n// function buildDiagram(treeData) {\n\n//   // clean all children of element\n//   const myNode = document.getElementById(\"merkle-graph\");\n//   myNode.innerHTML = '';\n\n//   // Set the dimensions and margins of the diagram\n//   var margin = { top: 20, right: 90, bottom: 30, left: 90 },\n//     width = 960 - margin.left - margin.right,\n//     height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the body of the page\n//   // appends a 'group' element to 'svg'\n//   // moves the 'group' element to the top left margin\n//   var svg = d3.select(\"graph\").append(\"svg\")\n//     .attr(\"width\", width + margin.right + margin.left)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//     .append(\"g\")\n//     .attr(\"transform\", \"translate(\"\n//       + margin.left + \",\" + margin.top + \")\");\n\n//   var i = 0,\n//     duration = 750,\n//     root;\n\n//   // declares a tree layout and assigns the size\n//   var treemap = d3.tree().size([height, width]);\n\n//   // Assigns parent, children, height, depth\n//   root = d3.hierarchy(treeData, function (d) { return d.children; });\n//   root.x0 = height / 2;\n//   root.y0 = 0;\n\n//   if (root.children) {\n//     // Collapse after the second level\n//     root.children.forEach(collapse);\n//   }\n\n\n//   update(root);\n\n//   // Collapse the node and all it's children\n//   function collapse(d) {\n//     if (d.children) {\n//       d._children = d.children\n//       d._children.forEach(collapse)\n//       d.children = null\n//     }\n//   }\n\n//   function update(source) {\n\n//     // Assigns the x and y position for the nodes\n//     var treeData = treemap(root);\n\n//     // Compute the new tree layout.\n//     var nodes = treeData.descendants(),\n//       links = treeData.descendants().slice(1);\n\n//     // Normalize for fixed-depth.\n//     nodes.forEach(function (d) { d.y = d.depth * 180 });\n\n//     // ****************** Nodes section ***************************\n\n//     // Update the nodes...\n//     var node = svg.selectAll('g.node')\n//       .data(nodes, function (d) { return d.id || (d.id = ++i); });\n\n//     // Enter any new modes at the parent's previous position.\n//     var nodeEnter = node.enter().append('g')\n//       .attr('class', 'node')\n//       .attr(\"transform\", function (d) {\n//         return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n//       })\n//       .on('click', click);\n\n//     var rectHeight = 60, rectWidth = 120;\n\n//     nodeEnter.append('rect')\n//       .attr('class', 'node')\n//       .attr(\"width\", rectWidth)\n//       .attr(\"height\", rectHeight)\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (rectHeight / 2) * -1)\n//       .attr(\"rx\", \"5\")\n//       .style(\"fill\", function (d) {\n//         return d.data.fill;\n//       });\n\n//     // Add labels for the nodes\n//     nodeEnter.append('text')\n//       .attr(\"dy\", \"-.35em\")\n//       .attr(\"x\", function (d) {\n//         return 13;\n//       })\n//       .attr(\"text-anchor\", function (d) {\n//         return \"start\";\n//       })\n//       .text(function (d) { return d.data.name; })\n//       .append(\"tspan\")\n//       .attr(\"dy\", \"1.75em\")\n//       .attr(\"x\", function (d) {\n//         return 13;\n//       })\n//       .text(function (d) { return d.data.subname; });\n\n//     // UPDATE\n//     var nodeUpdate = nodeEnter.merge(node);\n\n//     // Transition to the proper position for the node\n//     nodeUpdate.transition()\n//       .duration(duration)\n//       .attr(\"transform\", function (d) {\n//         return \"translate(\" + d.y + \",\" + d.x + \")\";\n//       });\n\n//     // Update the node attributes and style\n//     nodeUpdate.select('circle.node')\n//       .attr('r', 10)\n//       .style(\"fill\", function (d) {\n//         return d._children ? \"lightsteelblue\" : \"#fff\";\n//       })\n//       .attr('cursor', 'pointer');\n\n\n//     // Remove any exiting nodes\n//     var nodeExit = node.exit().transition()\n//       .duration(duration)\n//       .attr(\"transform\", function (d) {\n//         return \"translate(\" + source.y + \",\" + source.x + \")\";\n//       })\n//       .remove();\n\n//     // On exit reduce the node circles size to 0\n//     nodeExit.select('circle')\n//       .attr('r', 1e-6);\n\n//     // On exit reduce the opacity of text labels\n//     nodeExit.select('text')\n//       .style('fill-opacity', 1e-6);\n\n//     // ****************** links section ***************************\n\n//     // Update the links...\n//     var link = svg.selectAll('path.link')\n//       .data(links, function (d) { return d.id; });\n\n//     // Enter any new links at the parent's previous position.\n//     var linkEnter = link.enter().insert('path', \"g\")\n//       .attr(\"class\", \"link\")\n//       .attr('d', function (d) {\n//         var o = { x: source.x0, y: source.y0 }\n//         return diagonal(o, o)\n//       });\n\n//     // UPDATE\n//     var linkUpdate = linkEnter.merge(link);\n\n//     // Transition back to the parent element position\n//     linkUpdate.transition()\n//       .duration(duration)\n//       .attr('d', function (d) { return diagonal(d, d.parent) });\n\n//     // Remove any exiting links\n//     var linkExit = link.exit().transition()\n//       .duration(duration)\n//       .attr('d', function (d) {\n//         var o = { x: source.x, y: source.y }\n//         return diagonal(o, o)\n//       })\n//       .remove();\n\n//     // Store the old positions for transition.\n//     nodes.forEach(function (d) {\n//       d.x0 = d.x;\n//       d.y0 = d.y;\n//     });\n\n//     // Creates a curved (diagonal) path from parent to the child nodes\n//     function diagonal(s, d) {\n\n//       let path = `M ${s.y} ${s.x}\n//               C ${(s.y + d.y) / 2} ${s.x},\n//                 ${(s.y + d.y) / 2} ${d.x},\n//                 ${d.y} ${d.x}`\n\n//       return path\n//     }\n\n//     // Toggle children on click.\n//     function click(d) {\n//       if (d.children) {\n//         d._children = d.children;\n//         d.children = null;\n//       } else {\n//         d.children = d._children;\n//         d._children = null;\n//       }\n//       update(d);\n//     }\n//   }\n// }\n"]}